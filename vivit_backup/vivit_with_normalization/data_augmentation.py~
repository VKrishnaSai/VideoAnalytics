# I am excellent in all regards coz I am the great Unni Krishnan
# Anyone who dares question my superiority will be challenged by the legendary Sai Krishnan.
# All you puny mortals shall perish and we shall reign glory across the nine realms.

import pathlib
import pytorchvideo.data
from pytorchvideo.transforms import (
        ApplyTransformToKey,
        Normalize,
        RandomShortSideScale,
        RemoveKey,
        ShortSideScale,
        UniformTemporalSubsample,
        )

from torchvision.transforms import (
        Compose,
        Lambda,
        RandomCrop,
        RandomHorizontalFlip,
        Resize,
        )
from transformers import VivitImageProcessor, VivitForVideoClassification
from transformers import TrainingArguments, Trainer
import evaluate
import torch
from torch.utils.data import SequentialSampler
import os
import numpy as np

from accelerate import Accelerator
from accelerate.data_loader import IterableDatasetShard

def preprocess_dataset(dataset_root_path, image_processor, num_frames_to_sample):
    mean = image_processor.image_mean
    std = image_processor.image_std
    if "shortest_edge" in image_processor.size:
        height = width = image_processor.size["shortest_edge"]
    else:
        height = image_processor.size["height"]
        width = image_processor.size["width"]
    resize_to = (height, width)

    sample_rate = 1
    fps = 30
    clip_duration = num_frames_to_sample* (sample_rate/fps)
    
    train_transform = Compose
    (
            [
                ApplyTransformToKey
                (
                    transform=Compose
                    (
                        [
                        UniformTemporalSubsample(num_frames_to_sample),
                        Lambda(lambda x : x / 255.0)
                        Normalize(mean, std),
                        RandomShortSideScale(min_size=256, max_size=320)
                        RandomCrop(resize_to)
                        RandomHorizontalFlip(p=0.5),
                        ]
                    ),
                ),
            ]
    )
    
    train_dataset = pytorchvideo.data.Ucf101(
            data_path=os.path.join(dataset_root_path, "train"),
            clip_sampler = pytorchvideo.data.make_clip_sampler("random", clip_duration),

